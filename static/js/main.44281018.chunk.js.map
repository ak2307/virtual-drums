{"version":3,"sources":["Box.js","String.js","App.js","serviceWorker.js","index.js"],"names":["Box","props","playSound","audio","current","play","id","parentCallback","React","createRef","this","text","className","onClick","onKeyPress","ref","src","Component","String","console","log","App","state","key","sounds","mp3","role","aria-label","map","sound","index","e","setState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4OA8BeA,G,wDA3Bb,WAAYC,GAAQ,IAAD,8BACjB,gBAKFC,UAAY,WACV,EAAKC,MAAMC,QAAQC,OACnB,IAAMC,EAAK,EAAKH,MAAMC,QAAQE,GAC9B,EAAKL,MAAMM,eAAeD,IAN1B,EAAKH,MAAQK,IAAMC,YAHF,E,qDAcT,IAAD,EACgBC,KAAKT,MAApBU,EADD,EACCA,KAAKR,EADN,EACMA,MAEb,OACE,4BAAQS,UAAY,WAAWN,GAAIK,EAAME,QAASH,KAAKR,UAAWY,WAAYJ,KAAKR,WAChFS,EACD,2BAAOI,IAAKL,KAAKP,MAAOa,IAAKb,EAAOS,UAAU,OAAON,GAAIK,S,GArB/CM,cCSHC,MATf,SAAiBjB,GAEb,OADAkB,QAAQC,IAAInB,EAAMU,MAEd,yBAAKL,GAAG,UAAR,eACgBL,EAAMU,OCuCfU,E,kDAvCb,WAAYpB,GAAO,IAAD,8BAChB,gBACKqB,MAAQ,CACXC,IAAK,GACLC,OAAS,CACP,CAACD,IAAK,IAAKE,IAAK,4DAChB,CAACF,IAAK,IAAKE,IAAK,4DAChB,CAACF,IAAK,IAAKE,IAAK,4DAChB,CAACF,IAAK,IAAKE,IAAK,8DAChB,CAACF,IAAK,IAAKE,IAAK,4DAChB,CAACF,IAAK,IAAKE,IAAK,0DAChB,CAACF,IAAK,IAAKE,IAAK,8DAChB,CAACF,IAAK,IAAKE,IAAK,8DAChB,CAACF,IAAK,IAAKE,IAAK,4DAbJ,E,qDAkBN,IAAD,OACCD,EAAWd,KAAKY,MAAhBE,OACR,OACE,6BACE,yBAAKlB,GAAG,eAAeM,UAAU,aACjC,wBAAIN,GAAG,WAAU,0BAAMoB,KAAK,MAAMC,aAAW,SAA5B,gBAAjB,kBAA6E,0BAAMD,KAAK,MAAMC,aAAW,SAA5B,iBAC3E,yBAAKrB,GAAG,UAAUM,UAAU,WAEzBY,EAAOI,KAAI,SAACC,EAAOC,GAAR,OACV,kBAAC,EAAD,CAAKnB,KAAQkB,EAAMN,IAAKA,IAAKO,EAAQ3B,MAAO0B,EAAMJ,IAAKlB,eAAgB,SAACwB,GAAO,EAAKC,SAAS,CAAET,IAAKQ,UAEtG,kBAAC,EAAD,CAASpB,KAAMD,KAAKY,MAAMC,a,GA9BtBN,aCOEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,a","file":"static/js/main.44281018.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Box extends Component {\r\n  constructor(props) {\r\n    super();\r\n    \r\n    this.audio = React.createRef();\r\n  }\r\n  \r\n  playSound = () => {\r\n    this.audio.current.play();\r\n    const id = this.audio.current.id;\r\n    this.props.parentCallback(id);\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    const { text,audio } = this.props;\r\n\r\n    return ( \r\n      <button className = \"drum-pad\" id={text} onClick={this.playSound} onKeyPress={this.playSound}> \r\n        {text} \r\n        <audio ref={this.audio} src={audio} className=\"clip\" id={text}  />\r\n      </button>\r\n    ) \r\n  }\r\n}\r\n\r\n\r\nexport default Box;\r\n\r\n\r\n","import React from 'react';\r\n\r\nfunction String (props) {\r\n    console.log(props.text);\r\n    return (\r\n        <div id=\"string\">\r\n           You Played: {props.text}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default String;","import React, { Component } from 'react';\nimport './App.css';\nimport Box from './Box.js';\nimport String from './String.js';\n\nclass App extends Component {\n  constructor(props){\n    super();\n    this.state =({ \n      key: '',\n      sounds : [\n        {key: 'Q', mp3: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3\"},\n        {key: 'W', mp3: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\"},\n        {key: 'E', mp3: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\"},\n        {key: 'A', mp3: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3\"},\n        {key: 'S', mp3: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3\"},\n        {key: 'D', mp3: \"https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3\"},\n        {key: 'Z', mp3: \"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\"},\n        {key: 'X', mp3: \"https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3\"},\n        {key: 'C', mp3: \"https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3\"},\n      ]\n    })\n  }\n\n    render() {\n      const { sounds } = this.state;\n      return (\n        <div>\n          <div id=\"drum-machine\" className=\"container\">\n          <h1 id=\"heading\"><span role=\"img\" aria-label=\"drums\">ü•Å</span> Play The Drums<span role=\"img\" aria-label=\"drums\">ü•Å</span></h1>  \n            <div id=\"display\" className=\"display\">\n          \n              {sounds.map((sound, index)=> (\n                <Box text = {sound.key} key={index}  audio={sound.mp3} parentCallback={(e) => {this.setState({ key: e })}} />\n              ))}\n              <String  text={this.state.key}  />\n            </div>\n          </div>\n        </div>\n    )}\n  };\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}